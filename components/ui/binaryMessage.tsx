"use client";

import { useState, useEffect } from "react";

interface BinaryMessageProps {
  flickerProbability?: number;
}

const PATTERN = [
  "00  01 010110 11     10     101010",
  "10  10 011010 01     11     010100",
  "01  00 01     10     11     10  10",
  "100100 111010 11     00     10  10",
  "011001 011111 10     00     00  01",
  "01  10 10     10     10     01  01",
  "01  11 110011 000100 000011 110110",
  "00  10 010111 110110 010001 011001",
];

export default function BinaryMessage({
  flickerProbability = 0.2,
}: BinaryMessageProps) {
  const [grid, setGrid] = useState<(number | null)[][]>(INIT_GRID);
  useEffect(() => {
    const intervalId = setInterval(() => {
      setGrid((prevGrid) =>
        prevGrid.map((row) =>
          row.map((cell) =>
            cell !== null && Math.random() < flickerProbability
              ? 1 - cell
              : cell
          )
        )
      );
    }, 700);

    return () => clearInterval(intervalId);
  }, [flickerProbability]);

  return (
    <div
      className="grid gap-1"
      style={{
        gridTemplateColumns: `repeat(${PATTERN[0].length}, minmax(0, 1fr))`,
      }}
      role="img"
      onClick={() => console.log(grid)}
    >
      {grid.map((row, i) =>
        row.map((cell, j) => (
          <div
            key={`${i}-${j}`}
            className={`w-1 h-3 flex items-center justify-center text-m font-mono transition-all duration-200 ease-in-out tracking-tighter ${
              cell === 1
                ? "text-green-300 animate-flicker"
                : cell === 0
                  ? "text-green-700"
                  : "text-transparent"
            }`}
            style={{
              textShadow: cell === 1 ? "0 0 10px #6ee7b7" : "",
            }}
          >
            {cell !== null ? cell : ""}
          </div>
        ))
      )}
    </div>
  );
}
const INIT_GRID = [
  [
    0,
    1,
    null,
    null,
    1,
    1,
    null,
    1,
    1,
    0,
    1,
    0,
    0,
    null,
    1,
    1,
    null,
    null,
    null,
    null,
    null,
    0,
    1,
    null,
    null,
    null,
    null,
    null,
    0,
    1,
    0,
    1,
    1,
    0,
  ],
  [
    0,
    1,
    null,
    null,
    1,
    0,
    null,
    1,
    0,
    0,
    1,
    0,
    0,
    null,
    0,
    0,
    null,
    null,
    null,
    null,
    null,
    1,
    1,
    null,
    null,
    null,
    null,
    null,
    0,
    1,
    1,
    1,
    0,
    0,
  ],
  [
    1,
    1,
    null,
    null,
    0,
    0,
    null,
    1,
    1,
    null,
    null,
    null,
    null,
    null,
    0,
    0,
    null,
    null,
    null,
    null,
    null,
    1,
    0,
    null,
    null,
    null,
    null,
    null,
    1,
    1,
    null,
    null,
    1,
    1,
  ],
  [
    0,
    1,
    1,
    1,
    1,
    1,
    null,
    1,
    0,
    0,
    1,
    1,
    1,
    null,
    0,
    1,
    null,
    null,
    null,
    null,
    null,
    0,
    1,
    null,
    null,
    null,
    null,
    null,
    1,
    1,
    null,
    null,
    0,
    0,
  ],
  [
    1,
    1,
    0,
    1,
    1,
    1,
    null,
    1,
    1,
    0,
    0,
    0,
    1,
    null,
    0,
    0,
    null,
    null,
    null,
    null,
    null,
    0,
    1,
    null,
    null,
    null,
    null,
    null,
    0,
    1,
    null,
    null,
    1,
    0,
  ],
  [
    0,
    0,
    null,
    null,
    1,
    1,
    null,
    0,
    0,
    null,
    null,
    null,
    null,
    null,
    1,
    1,
    null,
    null,
    null,
    null,
    null,
    1,
    1,
    null,
    null,
    null,
    null,
    null,
    1,
    1,
    null,
    null,
    0,
    1,
  ],
  [
    0,
    1,
    null,
    null,
    1,
    0,
    null,
    1,
    0,
    0,
    1,
    1,
    0,
    null,
    0,
    0,
    0,
    0,
    0,
    0,
    null,
    0,
    1,
    0,
    1,
    1,
    1,
    null,
    0,
    0,
    1,
    0,
    1,
    1,
  ],
  [
    0,
    0,
    null,
    null,
    0,
    1,
    null,
    0,
    0,
    0,
    1,
    0,
    1,
    null,
    1,
    0,
    0,
    0,
    0,
    0,
    null,
    1,
    1,
    0,
    1,
    1,
    0,
    null,
    0,
    0,
    1,
    0,
    1,
    0,
  ],
];
